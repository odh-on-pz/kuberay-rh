{
  "swagger": "2.0",
  "info": {
    "title": "KubeRay API",
    "version": "0.6.0",
    "description": "This file contains REST API specification for KubeRay. The file is autogenerated from the swagger definition.",
    "license": {
      "name": "Apache 2.0",
      "url": "https://raw.githubusercontent.com/ray-project/kuberay/master/LICENSE"
    }
  },
  "tags": [
    {
      "name": "RayServeService"
    }
  ],
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/apis/v1alpha2/clusters": {
      "get": {
        "summary": "Finds all Clusters in all namespaces. Supports pagination, and sorting on certain fields.",
        "operationId": "ClusterService_ListAllClusters",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoListAllClustersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "ClusterService"
        ]
      }
    },
    "/apis/v1alpha2/namespaces/{namespace}/clusters": {
      "get": {
        "summary": "Finds all Clusters in a given namespace. Supports pagination, and sorting on certain fields.",
        "operationId": "ClusterService_ListCluster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoListClustersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "description": "Required. The namespace of the clusters to be retrieved.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ClusterService"
        ]
      },
      "post": {
        "summary": "Creates a new Cluster.",
        "operationId": "ClusterService_CreateCluster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoCluster"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "description": "Required. The namespace of the cluster to be created.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "description": "Required. The cluster to be created.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/protoCluster"
            }
          }
        ],
        "tags": [
          "ClusterService"
        ]
      }
    },
    "/apis/v1alpha2/namespaces/{namespace}/clusters/{name}": {
      "get": {
        "summary": "Finds a specific Cluster by ID.",
        "operationId": "ClusterService_GetCluster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoCluster"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "description": "Required. The namespace of the cluster to be retrieved.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Required. The name of the cluster to be retrieved.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ClusterService"
        ]
      },
      "delete": {
        "summary": "Deletes an cluster without deleting the cluster's runs and jobs. To\navoid unexpected behaviors, delete an cluster's runs and jobs before\ndeleting the cluster.",
        "operationId": "ClusterService_DeleteCluster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "description": "The namespace of the cluster to be deleted.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "The name of the cluster to be deleted.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ClusterService"
        ]
      }
    },
    "/apis/v1alpha2/compute_templates": {
      "get": {
        "summary": "Finds all compute templates in all namespaces. Supports pagination, and sorting on certain fields.",
        "operationId": "ComputeTemplateService_ListAllComputeTemplates",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoListAllComputeTemplatesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "ComputeTemplateService"
        ]
      }
    },
    "/apis/v1alpha2/image_templates": {
      "post": {
        "summary": "Not implemented. Creates a new ImageTemplate.",
        "operationId": "ImageTemplateService_CreateImageTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoImageTemplate"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "The image template to be created.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/protoImageTemplate"
            }
          },
          {
            "name": "namespace",
            "description": "The namespace of the image template to be created.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ImageTemplateService"
        ]
      }
    },
    "/apis/v1alpha2/namespaces/{namespace}/compute_templates": {
      "get": {
        "summary": "Finds all compute templates in a given namespace. Supports pagination, and sorting on certain fields.",
        "operationId": "ComputeTemplateService_ListComputeTemplates",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoListComputeTemplatesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "description": "Required. The namespace of the compute templates to be retrieved.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ComputeTemplateService"
        ]
      },
      "post": {
        "summary": "Creates a new compute template.",
        "operationId": "ComputeTemplateService_CreateComputeTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoComputeTemplate"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "description": "Required. The namespace of the compute template to be created",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "description": "The compute template to be created.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/protoComputeTemplate"
            }
          }
        ],
        "tags": [
          "ComputeTemplateService"
        ]
      }
    },
    "/apis/v1alpha2/namespaces/{namespace}/compute_templates/{name}": {
      "get": {
        "summary": "Finds a specific compute template by its name and namespace.",
        "operationId": "ComputeTemplateService_GetComputeTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoComputeTemplate"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "description": "Required. The namespace of the compute template to be retrieved.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Required. The name of the ComputeTemplate to be retrieved.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ComputeTemplateService"
        ]
      },
      "delete": {
        "summary": "Deletes a compute template by its name and namespace",
        "operationId": "ComputeTemplateService_DeleteComputeTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "description": "Required. The namespace of the compute template to be deleted.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Required. The name of the compute template to be deleted.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ComputeTemplateService"
        ]
      }
    },
    "/apis/v1alpha2/namespaces/{namespace}/image_templates": {
      "get": {
        "summary": "Not Implemented. Finds all ImageTemplates. Supports pagination, and sorting on certain fields.",
        "operationId": "ImageTemplateService_ListImageTemplates",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoListImageTemplatesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "description": "The namespace of the image templates to be retrieved.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ImageTemplateService"
        ]
      }
    },
    "/apis/v1alpha2/namespaces/{namespace}/image_templates/{name}": {
      "get": {
        "summary": "Not implemented. Finds a specific ImageTemplate by ID.",
        "operationId": "ImageTemplateService_GetImageTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoImageTemplate"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "description": "The namespace of the image template to be retrieved.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "The name of the image template to be retrieved.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ImageTemplateService"
        ]
      },
      "delete": {
        "summary": "Not implemented. Deletes an ImageTemplate.",
        "operationId": "ImageTemplateService_DeleteImageTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "description": "The namespace of the image template to be deleted.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "The name of the image template to be deleted.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ImageTemplateService"
        ]
      }
    },
    "/apis/v1alpha2/jobs": {
      "get": {
        "summary": "Finds all job in all namespaces. Supports pagination, and sorting on certain fields.",
        "operationId": "RayJobService_ListAllRayJobs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoListAllRayJobsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "RayJobService"
        ]
      }
    },
    "/apis/v1alpha2/namespaces/{namespace}/jobs": {
      "get": {
        "summary": "Finds all job in a given namespace. Supports pagination, and sorting on certain fields.",
        "operationId": "RayJobService_ListRayJobs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoListRayJobsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "description": "Required. The namespace of the job to be retrieved.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "RayJobService"
        ]
      },
      "post": {
        "summary": "Creates a new job.",
        "operationId": "RayJobService_CreateRayJob",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoRayJob"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "description": "Required. The namespace of the job to be created",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "description": "Required. The job to be created.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/protoRayJob"
            }
          }
        ],
        "tags": [
          "RayJobService"
        ]
      }
    },
    "/apis/v1alpha2/namespaces/{namespace}/jobs/{name}": {
      "get": {
        "summary": "Finds a specific job by its name and namespace.",
        "operationId": "RayJobService_GetRayJob",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoRayJob"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "description": "Required. The namespace of the job to be retrieved.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Required. The name of the job to be retrieved.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "RayJobService"
        ]
      },
      "delete": {
        "summary": "Deletes a job by its name and namespace.",
        "operationId": "RayJobService_DeleteRayJob",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "description": "Required. The namespace of the job to be deleted.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Required. The name of the job to be deleted.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "RayJobService"
        ]
      }
    },
    "/apis/v1alpha2/namespaces/{namespace}/services": {
      "get": {
        "summary": "Finds all ray services in a given namespace. Supports pagination, and sorting on certain fields.",
        "operationId": "RayServeService_ListRayServices",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoListRayServicesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "description": "Required. The namespace of the ray services to be retrieved.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageToken",
            "description": "A page token to request the next page of results. The token is acquried\nfrom the nextPageToken field of the response from the previous\nListRayServices call or can be omitted when fetching the first page.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "description": "The number of RayServices to be listed per page. If there are more\nRayServices than this number, the response message will contain a\nnextPageToken field you can use to fetch the next page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "RayServeService"
        ]
      },
      "post": {
        "summary": "Create a new ray serve.",
        "operationId": "RayServeService_CreateRayService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoRayService"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "description": "Required. The namespace of the ray service to be created.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "description": "Required. The ray service to be created.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/protoRayService"
            }
          }
        ],
        "tags": [
          "RayServeService"
        ]
      }
    },
    "/apis/v1alpha2/namespaces/{namespace}/services/{name}": {
      "get": {
        "summary": "Find a specific ray serve by name and namespace.",
        "operationId": "RayServeService_GetRayService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoRayService"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "description": "Required. The namespace used for retrieving the ray service.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Required. The name used for retrieving the ray service.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "RayServeService"
        ]
      },
      "delete": {
        "summary": "Deletes a ray service by its name and namespace",
        "operationId": "RayServeService_DeleteRayService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "description": "The namespace of the ray service to be deleted.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "The name of the ray service to be deleted.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "RayServeService"
        ]
      },
      "put": {
        "summary": "Update a ray serve.\nWe may",
        "operationId": "RayServeService_UpdateRayService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoRayService"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "description": "Required. The namespace of the ray service to be updated.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Required. The name of the ray service to be updated.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "description": "Required. The ray service to be updated.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/protoRayService"
            }
          }
        ],
        "tags": [
          "RayServeService"
        ]
      }
    },
    "/apis/v1alpha2/namespaces/{namespace}/services/{name}/configs": {
      "patch": {
        "summary": "Update a ray serve configs.\nPatch mode update without possible deletion the existing raycluster under the hood. \nonly support update the service configs and worker.",
        "operationId": "RayServeService_UpdateRayServiceConfigs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoRayService"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "description": "Required. The namespace of the ray service to be updated.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Required. The name of ray service to be updated.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "description": "Required. The ray service to be updated.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/protoUpdateRayServiceBody"
            }
          }
        ],
        "tags": [
          "RayServeService"
        ]
      }
    },
    "/apis/v1alpha2/services": {
      "get": {
        "summary": "Finds all ray services in a given namespace. Supports pagination, and sorting on certain fields.",
        "operationId": "RayServeService_ListAllRayServices",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoListAllRayServicesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pageToken",
            "description": "A page token to request the next page of results. The token is acquried\nfrom the nextPageToken field of the response from the previous\nListRayServices call or can be omitted when fetching the first page.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "description": "The number of RayServices to be listed per page. If there are more\nRayServices than this number, the response message will contain a\nnextPageToken field you can use to fetch the next page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "RayServeService"
        ]
      }
    }
  },
  "definitions": {
    "ClusterEnvironment": {
      "type": "string",
      "enum": [
        "DEV",
        "TESTING",
        "STAGING",
        "PRODUCTION"
      ],
      "default": "DEV",
      "description": "Optional field."
    },
    "EnvValueFromSource": {
      "type": "string",
      "enum": [
        "CONFIGMAP",
        "SECRET",
        "RESOURCEFIELD",
        "FIELD"
      ],
      "default": "CONFIGMAP",
      "title": "Source of environment variable"
    },
    "VolumeAccessMode": {
      "type": "string",
      "enum": [
        "RWO",
        "ROX",
        "RWX"
      ],
      "default": "RWO"
    },
    "VolumeHostPathType": {
      "type": "string",
      "enum": [
        "DIRECTORY",
        "FILE"
      ],
      "default": "DIRECTORY",
      "description": "If indicate hostpath, we need to let user indicate which type \nthey would like to use."
    },
    "VolumeMountPropagationMode": {
      "type": "string",
      "enum": [
        "NONE",
        "HOSTTOCONTAINER",
        "BIDIRECTIONAL"
      ],
      "default": "NONE"
    },
    "VolumeVolumeType": {
      "type": "string",
      "enum": [
        "PERSISTENT_VOLUME_CLAIM",
        "HOST_PATH",
        "EPHEMERAL",
        "CONFIGMAP",
        "SECRET",
        "EMPTY_DIR"
      ],
      "default": "PERSISTENT_VOLUME_CLAIM"
    },
    "googlerpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "protoCluster": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Required input field. Unique cluster name provided by user.",
          "required": [
            "name"
          ]
        },
        "namespace": {
          "type": "string",
          "title": "Required input field. Cluster's namespace provided by user",
          "required": [
            "namespace"
          ]
        },
        "user": {
          "type": "string",
          "description": "Required field. This field indicates the user who owns the cluster.",
          "required": [
            "user"
          ]
        },
        "version": {
          "type": "string",
          "title": "Optional input field. Ray cluster version"
        },
        "environment": {
          "$ref": "#/definitions/ClusterEnvironment"
        },
        "clusterSpec": {
          "$ref": "#/definitions/protoClusterSpec",
          "title": "Required field. This field indicates ray cluster configuration"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Optional. Annotations, for example, \"kubernetes.io/ingress.class\" to define Ingress class"
        },
        "envs": {
          "$ref": "#/definitions/protoEnvironmentVariables",
          "description": "Optional input field. Container environment variables from user."
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Output. The time that the cluster created.",
          "readOnly": true
        },
        "deletedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Output. The time that the cluster deleted.",
          "readOnly": true
        },
        "clusterState": {
          "type": "string",
          "title": "Output. The status to show the cluster status.state",
          "readOnly": true
        },
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protoClusterEvent"
          },
          "description": "Output. The list related to the cluster.",
          "readOnly": true
        },
        "serviceEndpoint": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Output. The service endpoint of the cluster",
          "readOnly": true
        }
      },
      "required": [
        "name",
        "namespace",
        "user"
      ]
    },
    "protoClusterEvent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Output. Unique Event Id.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Output. Human readable name for event.",
          "readOnly": true
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Output. The creation time of the event.",
          "readOnly": true
        },
        "firstTimestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Output. The last time the event occur.",
          "readOnly": true
        },
        "lastTimestamp": {
          "type": "string",
          "format": "date-time",
          "title": "Output. The first time the event occur",
          "readOnly": true
        },
        "reason": {
          "type": "string",
          "description": "Output. The reason for the transition into the object's current status.",
          "readOnly": true
        },
        "message": {
          "type": "string",
          "description": "Output. A human-readable description of the status of this operation.",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "title": "Output. Type of this event (Normal, Warning), new types could be added in the future",
          "readOnly": true
        },
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "Output. The number of times this event has occurred.",
          "readOnly": true
        }
      }
    },
    "protoClusterSpec": {
      "type": "object",
      "properties": {
        "headGroupSpec": {
          "$ref": "#/definitions/protoHeadGroupSpec",
          "title": "Required. The head group configuration"
        },
        "workerGroupSpec": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protoWorkerGroupSpec"
          },
          "title": "Optional. The worker group configurations"
        }
      },
      "description": "Cluster specification."
    },
    "protoEnvValueFrom": {
      "type": "object",
      "properties": {
        "source": {
          "$ref": "#/definitions/EnvValueFromSource"
        },
        "name": {
          "type": "string",
          "title": "Name for config map or secret, container name for resource, path for field"
        },
        "key": {
          "type": "string",
          "title": "Key for config map or secret, resource name for resource"
        }
      }
    },
    "protoEnvironmentVariables": {
      "type": "object",
      "properties": {
        "values": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "valuesFrom": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/protoEnvValueFrom"
          }
        }
      },
      "title": "This allows to specify both - environment variables containing values and environment values containing valueFrom"
    },
    "protoHeadGroupSpec": {
      "type": "object",
      "properties": {
        "computeTemplate": {
          "type": "string",
          "title": "Required. The computeTemplate of head node group",
          "required": [
            "compute_template"
          ]
        },
        "image": {
          "type": "string",
          "title": "Optional field. This field will be used to retrieve right ray container"
        },
        "serviceType": {
          "type": "string",
          "title": "Optional. The service type (ClusterIP, NodePort, Load balancer) of the head node"
        },
        "enableIngress": {
          "type": "boolean",
          "title": "Optional. Enable Ingress\nif Ingress is enabled, we might have to specify annotation IngressClassAnnotationKey, for the cluster itself, defining Ingress class"
        },
        "rayStartParams": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Required. The ray start params of head node group.",
          "required": [
            "ray_start_params"
          ]
        },
        "volumes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protoVolume"
          },
          "title": "Optional. The volumes mount to head pod"
        },
        "serviceAccount": {
          "type": "string",
          "title": "Optional. ServiceAccount used by head pod\nNote that the service account has to be created prior to usage here"
        },
        "imagePullSecret": {
          "type": "string",
          "title": "Optional. image pull secret used by head pod"
        },
        "environment": {
          "$ref": "#/definitions/protoEnvironmentVariables",
          "title": "Optional. Environment variables for head pod"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Optional. Annotations for the head pod"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Optional. Labels for the head pod"
        }
      },
      "title": "Cluster HeadGroup specification",
      "required": [
        "computeTemplate",
        "rayStartParams"
      ]
    },
    "protoListAllClustersResponse": {
      "type": "object",
      "properties": {
        "clusters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protoCluster"
          },
          "description": "A list of clusters returned.",
          "readOnly": true
        }
      }
    },
    "protoListClustersResponse": {
      "type": "object",
      "properties": {
        "clusters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protoCluster"
          },
          "description": "A list of clusters returned.",
          "readOnly": true
        }
      }
    },
    "protoVolume": {
      "type": "object",
      "properties": {
        "mountPath": {
          "type": "string"
        },
        "volumeType": {
          "$ref": "#/definitions/VolumeVolumeType"
        },
        "name": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "readOnly": {
          "type": "boolean"
        },
        "hostPathType": {
          "$ref": "#/definitions/VolumeHostPathType"
        },
        "mountPropagationMode": {
          "$ref": "#/definitions/VolumeMountPropagationMode"
        },
        "storageClassName": {
          "type": "string",
          "title": "If indicate ephemeral, we need to let user specify volumeClaimTemplate"
        },
        "accessMode": {
          "$ref": "#/definitions/VolumeAccessMode"
        },
        "storage": {
          "type": "string"
        },
        "items": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "protoWorkerGroupSpec": {
      "type": "object",
      "properties": {
        "groupName": {
          "type": "string",
          "title": "Required. Group name of the current worker group",
          "required": [
            "group_name"
          ]
        },
        "computeTemplate": {
          "type": "string",
          "title": "Required. The computeTemplate of head node group",
          "required": [
            "compute_template"
          ]
        },
        "image": {
          "type": "string",
          "title": "Optional field. This field will be used to retrieve right ray container"
        },
        "replicas": {
          "type": "integer",
          "format": "int32",
          "title": "Required. Desired replicas of the worker group",
          "required": [
            "replicas"
          ]
        },
        "minReplicas": {
          "type": "integer",
          "format": "int32",
          "description": "Optional. Min replicas of the worker group, can't be greater than max_replicas."
        },
        "maxReplicas": {
          "type": "integer",
          "format": "int32",
          "title": "Required. Max replicas of the worker group (>0)",
          "required": [
            "max_replicas"
          ]
        },
        "rayStartParams": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Required. The ray start parameters of worker node group",
          "required": [
            "ray_start_params"
          ]
        },
        "volumes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protoVolume"
          },
          "title": "Optional. The volumes mount to worker pods"
        },
        "serviceAccount": {
          "type": "string",
          "title": "Optional. ServiceAccount used by worker pod\nNote that the service account has to be created prior to usage here"
        },
        "imagePullSecret": {
          "type": "string",
          "title": "Optional. image pull secret used by worker pod"
        },
        "environment": {
          "$ref": "#/definitions/protoEnvironmentVariables",
          "title": "Optional. Environment variables for worker pod"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Optional. Annotations for the worker pod"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Optional. Labels for the worker pod"
        }
      },
      "required": [
        "groupName",
        "computeTemplate",
        "replicas",
        "maxReplicas",
        "rayStartParams"
      ]
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "typeUrl": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "protoComputeTemplate": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Required. The name of the compute template",
          "required": [
            "name"
          ]
        },
        "namespace": {
          "type": "string",
          "title": "Required. The namespace of the compute template",
          "required": [
            "namespace"
          ]
        },
        "cpu": {
          "type": "integer",
          "format": "int64",
          "title": "Required. Number of cpus",
          "required": [
            "cpu"
          ]
        },
        "memory": {
          "type": "integer",
          "format": "int64",
          "title": "Required. Number of memory",
          "required": [
            "memory"
          ]
        },
        "gpu": {
          "type": "integer",
          "format": "int64",
          "title": "Optional. Number of gpus"
        },
        "gpuAccelerator": {
          "type": "string",
          "title": "Optional. The detail gpu accelerator type"
        },
        "tolerations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protoPodToleration"
          },
          "title": "Optional pod tolerations"
        }
      },
      "title": "ComputeTemplate can be reused by any compute units like worker group, workspace, image build job, etc",
      "required": [
        "name",
        "namespace",
        "cpu",
        "memory"
      ]
    },
    "protoImageTemplate": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "The ID of the image template"
        },
        "namespace": {
          "type": "string",
          "title": "The namespace of the image template"
        },
        "baseImage": {
          "type": "string",
          "title": "The base container image to be used for image building"
        },
        "pipPackages": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The pip packages to install"
        },
        "condaPackages": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The conda packages to install"
        },
        "systemPackages": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The system packages to install"
        },
        "environmentVariables": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "The environment variables to set"
        },
        "customCommands": {
          "type": "string",
          "title": "The post install commands to execute"
        },
        "image": {
          "type": "string",
          "title": "Output. The result image generated"
        }
      },
      "title": "ImageTemplate can be used by worker group and workspce.\nThey can be distinguish by different entrypoints"
    },
    "protoListAllComputeTemplatesResponse": {
      "type": "object",
      "properties": {
        "computeTemplates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protoComputeTemplate"
          },
          "readOnly": true
        }
      }
    },
    "protoListComputeTemplatesResponse": {
      "type": "object",
      "properties": {
        "computeTemplates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protoComputeTemplate"
          },
          "readOnly": true
        }
      }
    },
    "protoListImageTemplatesResponse": {
      "type": "object",
      "properties": {
        "imageTemplates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protoImageTemplate"
          },
          "description": "A list of Compute returned."
        }
      }
    },
    "protoPodToleration": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "title": "key created by the node's taint"
        },
        "operator": {
          "type": "string",
          "title": "operator to apply"
        },
        "value": {
          "type": "string",
          "title": "optional string"
        },
        "effect": {
          "type": "string",
          "title": "Effect"
        }
      },
      "title": "Toleration for the compute template"
    },
    "protoListAllRayJobsResponse": {
      "type": "object",
      "properties": {
        "jobs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protoRayJob"
          },
          "readOnly": true
        }
      }
    },
    "protoListRayJobsResponse": {
      "type": "object",
      "properties": {
        "jobs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protoRayJob"
          },
          "readOnly": true
        }
      }
    },
    "protoRayJob": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Required input field. Unique job name provided by user.",
          "required": [
            "name"
          ]
        },
        "namespace": {
          "type": "string",
          "title": "Required input field. job namespace provided by user",
          "required": [
            "namespace"
          ]
        },
        "user": {
          "type": "string",
          "description": "Required field. This field indicates the user who owns the job.",
          "required": [
            "user"
          ]
        },
        "entrypoint": {
          "type": "string",
          "title": "The entrypoint of the RayJob"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Optional. Metadata is data to store along with this job."
        },
        "runtimeEnv": {
          "type": "string",
          "title": "Optional. RuntimeEnv is a Yaml string which maps to the RuntimeEnvYAML field of the RayJobSpec"
        },
        "jobId": {
          "type": "string",
          "description": "Optional. If jobId is not set, a new jobId will be auto-generated."
        },
        "shutdownAfterJobFinishes": {
          "type": "boolean",
          "description": "Optional. If set to true, the rayCluster will be deleted after the rayJob finishes. Defaults to false."
        },
        "clusterSelector": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Optional. The label selectors to choose exiting clusters. If not specified, cluster_spec must be set."
        },
        "clusterSpec": {
          "$ref": "#/definitions/protoClusterSpec",
          "description": "Optional. The cluster template, required if the cluster_selector is not specified."
        },
        "ttlSecondsAfterFinished": {
          "type": "integer",
          "format": "int32",
          "description": "Optional. TTLSecondsAfterFinished is the TTL to clean up RayCluster."
        },
        "jobSubmitter": {
          "$ref": "#/definitions/protoRayJobSubmitter",
          "title": "Optional Ray Job submitter"
        },
        "entrypointNumCpus": {
          "type": "number",
          "format": "float",
          "description": "Optional entrypointNumCpus specifies the number of cpus to reserve for the entrypoint command."
        },
        "entrypointNumGpus": {
          "type": "number",
          "format": "float",
          "description": "Optional entrypointNumGpus specifies the number of gpus to reserve for the entrypoint command."
        },
        "entrypointResources": {
          "type": "string",
          "description": "Optional entrypointResources specifies the custom resources and quantities to reserve \nfor the entrypoint command."
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Output. The time that the job created.",
          "readOnly": true
        },
        "deleteAt": {
          "type": "string",
          "format": "date-time",
          "description": "Output. The time that the job deleted.",
          "readOnly": true
        },
        "jobStatus": {
          "type": "string",
          "title": "Output. The current job status",
          "readOnly": true
        },
        "jobDeploymentStatus": {
          "type": "string",
          "title": "Output. The current job deployment status",
          "readOnly": true
        },
        "message": {
          "type": "string",
          "description": "Output. A human-readable description of the status of this operation.",
          "readOnly": true
        }
      },
      "title": "RayJob definition",
      "required": [
        "name",
        "namespace",
        "user"
      ]
    },
    "protoRayJobSubmitter": {
      "type": "object",
      "properties": {
        "image": {
          "type": "string",
          "title": "Required base image for job submitter. Make sure that Python/Ray version\nof the image corresponds to the one used in the cluster",
          "required": [
            "image"
          ]
        },
        "cpu": {
          "type": "string",
          "title": "Optional number of CPUs for submitter - default \"1\""
        },
        "memory": {
          "type": "string",
          "title": "Optional memory for the submitter - default \"1Gi\""
        }
      },
      "required": [
        "image"
      ]
    },
    "protoActorOptions": {
      "type": "object",
      "properties": {
        "runtimeEnv": {
          "type": "string",
          "description": "This deployment's runtime_env used by the actor."
        },
        "cpusPerActor": {
          "type": "number",
          "format": "double",
          "description": "Required. The number of CPUs required by the deployment's application per replica.",
          "required": [
            "cpus_per_actor"
          ]
        },
        "gpusPerActor": {
          "type": "number",
          "format": "double",
          "description": "Required. The number of GPUs required by the deployment's application per replica.",
          "required": [
            "gpus_per_actor"
          ]
        },
        "memoryPerActor": {
          "type": "string",
          "format": "uint64",
          "description": "Required. Restrict the heap memory usage of each replica.",
          "required": [
            "memory_per_actor"
          ]
        },
        "objectStoreMemoryPerActor": {
          "type": "string",
          "format": "uint64",
          "description": "Restrict the object store memory used per replica when creating objects."
        },
        "customResource": {
          "type": "string",
          "description": "The custom resources required by each replica."
        },
        "accceleratorType": {
          "type": "string",
          "description": "Forces replicas to run on nodes with the specified accelerator type."
        }
      },
      "description": "ActorOptions config actor configuration related to one serve deployement.",
      "required": [
        "cpusPerActor",
        "gpusPerActor",
        "memoryPerActor"
      ]
    },
    "protoListAllRayServicesResponse": {
      "type": "object",
      "properties": {
        "services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protoRayService"
          },
          "description": "A list of services.",
          "readOnly": true
        },
        "totalSize": {
          "type": "integer",
          "format": "int32",
          "description": "The total number of RayServices for the given query.",
          "readOnly": true
        },
        "nextPageToken": {
          "type": "string",
          "description": "The token to list the next page of RayServices.",
          "readOnly": true
        }
      }
    },
    "protoListRayServicesResponse": {
      "type": "object",
      "properties": {
        "services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protoRayService"
          },
          "title": "List of services",
          "readOnly": true
        },
        "totalSize": {
          "type": "integer",
          "format": "int32",
          "description": "The total number of RayServices for the given query.",
          "readOnly": true
        },
        "nextPageToken": {
          "type": "string",
          "description": "The token to list the next page of RayServices.",
          "readOnly": true
        }
      }
    },
    "protoRayService": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Required input field. Unique ray service name provided by user.",
          "required": [
            "name"
          ]
        },
        "namespace": {
          "type": "string",
          "title": "Required input field. ray service namespace provided by user",
          "required": [
            "namespace"
          ]
        },
        "user": {
          "type": "string",
          "description": "Required field. This field indicates the user who owns the ray service.",
          "required": [
            "user"
          ]
        },
        "serveDeploymentGraphSpec": {
          "$ref": "#/definitions/protoServeDeploymentGraphSpec",
          "description": "The config for ray serve deployments V1."
        },
        "serveConfigV2": {
          "type": "string",
          "title": "Config for serve deployment V2. Note that only one config V1 or V2 can be specified"
        },
        "serviceUnhealthySecondThreshold": {
          "type": "integer",
          "format": "int32",
          "title": "Serve deployment related health check"
        },
        "deploymentUnhealthySecondThreshold": {
          "type": "integer",
          "format": "int32",
          "title": "Dashboard agent related health check"
        },
        "clusterSpec": {
          "$ref": "#/definitions/protoClusterSpec",
          "description": "Required. The cluster template."
        },
        "rayServiceStatus": {
          "$ref": "#/definitions/protoRayServiceStatus",
          "description": "Output. The status for the ray service."
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Output. The time that the ray service created.",
          "readOnly": true
        },
        "deleteAt": {
          "type": "string",
          "format": "date-time",
          "description": "Output. The time that the ray service deleted.",
          "readOnly": true
        }
      },
      "required": [
        "name",
        "namespace",
        "user"
      ]
    },
    "protoRayServiceEvent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Output. Unique Event Id."
        },
        "name": {
          "type": "string",
          "description": "Output. Human readable name for event."
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Output. The creation time of the event."
        },
        "firstTimestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Output. The last time the event occur."
        },
        "lastTimestamp": {
          "type": "string",
          "format": "date-time",
          "title": "Output. The first time the event occur"
        },
        "reason": {
          "type": "string",
          "description": "Output. The reason for the transition into the object's current status."
        },
        "message": {
          "type": "string",
          "description": "Output. A human-readable description of the status of this operation."
        },
        "type": {
          "type": "string",
          "title": "Output. Type of this event (Normal, Warning), new types could be added in the future"
        },
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "Output. The number of times this event has occurred."
        }
      }
    },
    "protoRayServiceStatus": {
      "type": "object",
      "properties": {
        "applicationStatus": {
          "type": "string",
          "description": "NOTE(zcin): the first three fields are deprecated in favor of serve_application_status.\n(Deprecated) The ray serve application status."
        },
        "applicationMessage": {
          "type": "string",
          "description": "(Deprecated) A human-readable description of the status of this operation."
        },
        "serveDeploymentStatus": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protoServeDeploymentStatus"
          },
          "description": "(Deprecated) The status for each deployment."
        },
        "rayServiceEvents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protoRayServiceEvent"
          },
          "description": "The related event for the ray service."
        },
        "rayClusterName": {
          "type": "string",
          "description": "The ray cluster name."
        },
        "rayClusterState": {
          "type": "string",
          "description": "The state for ray cluster."
        },
        "serviceEndpoint": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "The service endpoint of the cluster and service."
        },
        "serveApplicationStatus": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protoServeApplicationStatus"
          },
          "title": "All ray serve application statuses"
        }
      }
    },
    "protoServeApplicationStatus": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Application name"
        },
        "status": {
          "type": "string",
          "title": "Application status"
        },
        "message": {
          "type": "string",
          "description": "Details about the application status."
        },
        "serveDeploymentStatus": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protoServeDeploymentStatus"
          },
          "title": "All ray serve deployment statuses in this application"
        }
      }
    },
    "protoServeConfig": {
      "type": "object",
      "properties": {
        "deploymentName": {
          "type": "string",
          "description": "Required. Input field. Unique ray service deployment name provided by user.",
          "required": [
            "deployment_name"
          ]
        },
        "replicas": {
          "type": "integer",
          "format": "int32",
          "description": "Rquired. Ray service deployment replicas, default set to 1.",
          "required": [
            "replicas"
          ]
        },
        "routePrefix": {
          "type": "string",
          "description": "ray service deployment route prefix indicated by user."
        },
        "maxConcurrentQueries": {
          "type": "integer",
          "format": "int32",
          "description": "max concurrent queries indicate for each ray service deployment."
        },
        "userConfig": {
          "type": "string",
          "description": "user config to the ray serve deployment."
        },
        "autoscalingConfig": {
          "type": "string",
          "description": "auto scaling config for ray serve deployment indicate by user."
        },
        "actorOptions": {
          "$ref": "#/definitions/protoActorOptions",
          "description": "Required. Actor options indicated resource of each deployment's actor."
        }
      },
      "required": [
        "deploymentName",
        "replicas"
      ]
    },
    "protoServeDeploymentGraphSpec": {
      "type": "object",
      "properties": {
        "importPath": {
          "type": "string",
          "description": "Required input field. Import path for load the ray serve.",
          "required": [
            "import_path"
          ]
        },
        "runtimeEnv": {
          "type": "string",
          "description": "runtime env for loading the ray serve."
        },
        "serveConfigs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protoServeConfig"
          },
          "description": "Required. Deployments config of the ray serve.",
          "required": [
            "serve_configs"
          ]
        }
      },
      "required": [
        "importPath",
        "serveConfigs"
      ]
    },
    "protoServeDeploymentStatus": {
      "type": "object",
      "properties": {
        "deploymentName": {
          "type": "string",
          "description": "Unique ray service deployment name."
        },
        "status": {
          "type": "string",
          "description": "Status of single deployment."
        },
        "message": {
          "type": "string",
          "description": "A human-readable description of the status of this operation."
        }
      }
    },
    "protoUpdateRayServiceBody": {
      "type": "object",
      "properties": {
        "workerGroupUpdateSpec": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protoWorkerGroupUpdateSpec"
          },
          "title": "Required. Specify the worker group to be update",
          "required": [
            "worker_group_update_spec"
          ]
        },
        "serveDeploymentGraphSpec": {
          "$ref": "#/definitions/protoServeDeploymentGraphSpec",
          "description": "Required. Deployments config of the ray serve."
        }
      },
      "required": [
        "workerGroupUpdateSpec"
      ]
    },
    "protoWorkerGroupUpdateSpec": {
      "type": "object",
      "properties": {
        "groupName": {
          "type": "string",
          "description": "The name of the worker group to be updated."
        },
        "replicas": {
          "type": "integer",
          "format": "int32",
          "description": "Required. The replicas of the worker group to be updated.",
          "required": [
            "replicas"
          ]
        },
        "minReplicas": {
          "type": "integer",
          "format": "int32",
          "description": "Required. The min replicas of the worker group to be updated.",
          "required": [
            "min_replicas"
          ]
        },
        "maxReplicas": {
          "type": "integer",
          "format": "int32",
          "description": "Required. The max replicas of the worker group to be updated.",
          "required": [
            "max_replicas"
          ]
        }
      },
      "required": [
        "replicas",
        "minReplicas",
        "maxReplicas"
      ]
    }
  }
}
