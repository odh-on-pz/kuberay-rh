{
  "swagger": "2.0",
  "info": {
    "title": "cluster.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "ClusterService"
    }
  ],
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/apis/v1alpha2/clusters": {
      "get": {
        "summary": "Finds all Clusters in all namespaces. Supports pagination, and sorting on certain fields.",
        "operationId": "ClusterService_ListAllClusters",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoListAllClustersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "ClusterService"
        ]
      }
    },
    "/apis/v1alpha2/namespaces/{namespace}/clusters": {
      "get": {
        "summary": "Finds all Clusters in a given namespace. Supports pagination, and sorting on certain fields.",
        "operationId": "ClusterService_ListCluster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoListClustersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "description": "Required. The namespace of the clusters to be retrieved.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ClusterService"
        ]
      },
      "post": {
        "summary": "Creates a new Cluster.",
        "operationId": "ClusterService_CreateCluster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoCluster"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "description": "Required. The namespace of the cluster to be created.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "description": "Required. The cluster to be created.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/protoCluster"
            }
          }
        ],
        "tags": [
          "ClusterService"
        ]
      }
    },
    "/apis/v1alpha2/namespaces/{namespace}/clusters/{name}": {
      "get": {
        "summary": "Finds a specific Cluster by ID.",
        "operationId": "ClusterService_GetCluster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoCluster"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "description": "Required. The namespace of the cluster to be retrieved.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Required. The name of the cluster to be retrieved.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ClusterService"
        ]
      },
      "delete": {
        "summary": "Deletes an cluster without deleting the cluster's runs and jobs. To\navoid unexpected behaviors, delete an cluster's runs and jobs before\ndeleting the cluster.",
        "operationId": "ClusterService_DeleteCluster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "description": "The namespace of the cluster to be deleted.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "The name of the cluster to be deleted.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ClusterService"
        ]
      }
    }
  },
  "definitions": {
    "ClusterEnvironment": {
      "type": "string",
      "enum": [
        "DEV",
        "TESTING",
        "STAGING",
        "PRODUCTION"
      ],
      "default": "DEV",
      "description": "Optional field."
    },
    "EnvValueFromSource": {
      "type": "string",
      "enum": [
        "CONFIGMAP",
        "SECRET",
        "RESOURCEFIELD",
        "FIELD"
      ],
      "default": "CONFIGMAP",
      "title": "Source of environment variable"
    },
    "VolumeAccessMode": {
      "type": "string",
      "enum": [
        "RWO",
        "ROX",
        "RWX"
      ],
      "default": "RWO"
    },
    "VolumeHostPathType": {
      "type": "string",
      "enum": [
        "DIRECTORY",
        "FILE"
      ],
      "default": "DIRECTORY",
      "description": "If indicate hostpath, we need to let user indicate which type \nthey would like to use."
    },
    "VolumeMountPropagationMode": {
      "type": "string",
      "enum": [
        "NONE",
        "HOSTTOCONTAINER",
        "BIDIRECTIONAL"
      ],
      "default": "NONE"
    },
    "VolumeVolumeType": {
      "type": "string",
      "enum": [
        "PERSISTENT_VOLUME_CLAIM",
        "HOST_PATH",
        "EPHEMERAL",
        "CONFIGMAP",
        "SECRET",
        "EMPTY_DIR"
      ],
      "default": "PERSISTENT_VOLUME_CLAIM"
    },
    "googlerpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "protoCluster": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Required input field. Unique cluster name provided by user.",
          "required": [
            "name"
          ]
        },
        "namespace": {
          "type": "string",
          "title": "Required input field. Cluster's namespace provided by user",
          "required": [
            "namespace"
          ]
        },
        "user": {
          "type": "string",
          "description": "Required field. This field indicates the user who owns the cluster.",
          "required": [
            "user"
          ]
        },
        "version": {
          "type": "string",
          "title": "Optional input field. Ray cluster version"
        },
        "environment": {
          "$ref": "#/definitions/ClusterEnvironment"
        },
        "clusterSpec": {
          "$ref": "#/definitions/protoClusterSpec",
          "title": "Required field. This field indicates ray cluster configuration"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Optional. Annotations, for example, \"kubernetes.io/ingress.class\" to define Ingress class"
        },
        "envs": {
          "$ref": "#/definitions/protoEnvironmentVariables",
          "description": "Optional input field. Container environment variables from user."
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Output. The time that the cluster created.",
          "readOnly": true
        },
        "deletedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Output. The time that the cluster deleted.",
          "readOnly": true
        },
        "clusterState": {
          "type": "string",
          "title": "Output. The status to show the cluster status.state",
          "readOnly": true
        },
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protoClusterEvent"
          },
          "description": "Output. The list related to the cluster.",
          "readOnly": true
        },
        "serviceEndpoint": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Output. The service endpoint of the cluster",
          "readOnly": true
        }
      },
      "required": [
        "name",
        "namespace",
        "user"
      ]
    },
    "protoClusterEvent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Output. Unique Event Id.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Output. Human readable name for event.",
          "readOnly": true
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Output. The creation time of the event.",
          "readOnly": true
        },
        "firstTimestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Output. The last time the event occur.",
          "readOnly": true
        },
        "lastTimestamp": {
          "type": "string",
          "format": "date-time",
          "title": "Output. The first time the event occur",
          "readOnly": true
        },
        "reason": {
          "type": "string",
          "description": "Output. The reason for the transition into the object's current status.",
          "readOnly": true
        },
        "message": {
          "type": "string",
          "description": "Output. A human-readable description of the status of this operation.",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "title": "Output. Type of this event (Normal, Warning), new types could be added in the future",
          "readOnly": true
        },
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "Output. The number of times this event has occurred.",
          "readOnly": true
        }
      }
    },
    "protoClusterSpec": {
      "type": "object",
      "properties": {
        "headGroupSpec": {
          "$ref": "#/definitions/protoHeadGroupSpec",
          "title": "Required. The head group configuration"
        },
        "workerGroupSpec": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protoWorkerGroupSpec"
          },
          "title": "Optional. The worker group configurations"
        }
      },
      "description": "Cluster specification."
    },
    "protoEnvValueFrom": {
      "type": "object",
      "properties": {
        "source": {
          "$ref": "#/definitions/EnvValueFromSource"
        },
        "name": {
          "type": "string",
          "title": "Name for config map or secret, container name for resource, path for field"
        },
        "key": {
          "type": "string",
          "title": "Key for config map or secret, resource name for resource"
        }
      }
    },
    "protoEnvironmentVariables": {
      "type": "object",
      "properties": {
        "values": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "valuesFrom": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/protoEnvValueFrom"
          }
        }
      },
      "title": "This allows to specify both - environment variables containing values and environment values containing valueFrom"
    },
    "protoHeadGroupSpec": {
      "type": "object",
      "properties": {
        "computeTemplate": {
          "type": "string",
          "title": "Required. The computeTemplate of head node group",
          "required": [
            "compute_template"
          ]
        },
        "image": {
          "type": "string",
          "title": "Optional field. This field will be used to retrieve right ray container"
        },
        "serviceType": {
          "type": "string",
          "title": "Optional. The service type (ClusterIP, NodePort, Load balancer) of the head node"
        },
        "enableIngress": {
          "type": "boolean",
          "title": "Optional. Enable Ingress\nif Ingress is enabled, we might have to specify annotation IngressClassAnnotationKey, for the cluster itself, defining Ingress class"
        },
        "rayStartParams": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Required. The ray start params of head node group.",
          "required": [
            "ray_start_params"
          ]
        },
        "volumes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protoVolume"
          },
          "title": "Optional. The volumes mount to head pod"
        },
        "serviceAccount": {
          "type": "string",
          "title": "Optional. ServiceAccount used by head pod\nNote that the service account has to be created prior to usage here"
        },
        "imagePullSecret": {
          "type": "string",
          "title": "Optional. image pull secret used by head pod"
        },
        "environment": {
          "$ref": "#/definitions/protoEnvironmentVariables",
          "title": "Optional. Environment variables for head pod"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Optional. Annotations for the head pod"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Optional. Labels for the head pod"
        }
      },
      "title": "Cluster HeadGroup specification",
      "required": [
        "computeTemplate",
        "rayStartParams"
      ]
    },
    "protoListAllClustersResponse": {
      "type": "object",
      "properties": {
        "clusters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protoCluster"
          },
          "description": "A list of clusters returned.",
          "readOnly": true
        }
      }
    },
    "protoListClustersResponse": {
      "type": "object",
      "properties": {
        "clusters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protoCluster"
          },
          "description": "A list of clusters returned.",
          "readOnly": true
        }
      }
    },
    "protoVolume": {
      "type": "object",
      "properties": {
        "mountPath": {
          "type": "string"
        },
        "volumeType": {
          "$ref": "#/definitions/VolumeVolumeType"
        },
        "name": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "readOnly": {
          "type": "boolean"
        },
        "hostPathType": {
          "$ref": "#/definitions/VolumeHostPathType"
        },
        "mountPropagationMode": {
          "$ref": "#/definitions/VolumeMountPropagationMode"
        },
        "storageClassName": {
          "type": "string",
          "title": "If indicate ephemeral, we need to let user specify volumeClaimTemplate"
        },
        "accessMode": {
          "$ref": "#/definitions/VolumeAccessMode"
        },
        "storage": {
          "type": "string"
        },
        "items": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "protoWorkerGroupSpec": {
      "type": "object",
      "properties": {
        "groupName": {
          "type": "string",
          "title": "Required. Group name of the current worker group",
          "required": [
            "group_name"
          ]
        },
        "computeTemplate": {
          "type": "string",
          "title": "Required. The computeTemplate of head node group",
          "required": [
            "compute_template"
          ]
        },
        "image": {
          "type": "string",
          "title": "Optional field. This field will be used to retrieve right ray container"
        },
        "replicas": {
          "type": "integer",
          "format": "int32",
          "title": "Required. Desired replicas of the worker group",
          "required": [
            "replicas"
          ]
        },
        "minReplicas": {
          "type": "integer",
          "format": "int32",
          "description": "Optional. Min replicas of the worker group, can't be greater than max_replicas."
        },
        "maxReplicas": {
          "type": "integer",
          "format": "int32",
          "title": "Required. Max replicas of the worker group (\u003e0)",
          "required": [
            "max_replicas"
          ]
        },
        "rayStartParams": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Required. The ray start parameters of worker node group",
          "required": [
            "ray_start_params"
          ]
        },
        "volumes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protoVolume"
          },
          "title": "Optional. The volumes mount to worker pods"
        },
        "serviceAccount": {
          "type": "string",
          "title": "Optional. ServiceAccount used by worker pod\nNote that the service account has to be created prior to usage here"
        },
        "imagePullSecret": {
          "type": "string",
          "title": "Optional. image pull secret used by worker pod"
        },
        "environment": {
          "$ref": "#/definitions/protoEnvironmentVariables",
          "title": "Optional. Environment variables for worker pod"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Optional. Annotations for the worker pod"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Optional. Labels for the worker pod"
        }
      },
      "required": [
        "groupName",
        "computeTemplate",
        "replicas",
        "maxReplicas",
        "rayStartParams"
      ]
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "typeUrl": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    }
  }
}
